input {
  # File inputs for different log types
  # Apache access logs - current
  file {
    path => "/var/log/apache2/access.log"
    start_position => "beginning"
    type => "apache_access"
    tags => ["apache", "access"]
  }
  
  # Apache access logs - rotated (plain text)
  file {
    path => "/var/log/apache2/access.log.*"
    start_position => "beginning"
    type => "apache_access"
    tags => ["apache", "access", "rotated"]
    exclude => "*.gz"
  }
  
  # Apache access logs - compressed rotated
  file {
    path => "/var/log/apache2/access.log.*.gz"
    start_position => "beginning"
    type => "apache_access"
    tags => ["apache", "access", "rotated", "compressed"]
    codec => "gzip"
  }
  
  # Apache error logs - current
  file {
    path => "/var/log/apache2/error.log"
    start_position => "beginning"
    type => "apache_error"
    tags => ["apache", "error"]
  }
  
  # Apache error logs - rotated (plain text)
  file {
    path => "/var/log/apache2/error.log.*"
    start_position => "beginning"
    type => "apache_error"
    tags => ["apache", "error", "rotated"]
    exclude => "*.gz"
  }
  
  # Apache error logs - compressed rotated
  file {
    path => "/var/log/apache2/error.log.*.gz"
    start_position => "beginning"
    type => "apache_error"
    tags => ["apache", "error", "rotated", "compressed"]
    codec => "gzip"
  }
  
  # Laravel logs - General
  file {
    path => "/var/www/html/storage/logs/laravel-*.log"
    start_position => "beginning"
    type => "laravel"
    tags => ["laravel", "application", "general"]
  }
  
  # Laravel logs - Error
  file {
    path => "/var/www/html/storage/logs/error-*.log"
    start_position => "beginning"
    type => "laravel_error"
    tags => ["laravel", "error", "application"]
  }
  
  # Laravel logs - Info
  file {
    path => "/var/www/html/storage/logs/info-*.log"
    start_position => "beginning"
    type => "laravel_info"
    tags => ["laravel", "info", "application"]
  }
  
  # Laravel logs - Mobile
  file {
    path => "/var/www/html/storage/logs/mobile-*.log"
    start_position => "beginning"
    type => "laravel_mobile"
    tags => ["laravel", "mobile", "application"]
  }
  
  file {
    path => "/home/ubuntu/.pm2/logs/*.log"
    start_position => "beginning"
    type => "pm2"
    tags => ["pm2", "nodejs"]
  }
  
  # PHP-FPM logs - current
  file {
    path => "/var/log/php8.1-fpm.log"
    start_position => "beginning"
    type => "php_fpm"
    tags => ["php", "fpm", "service"]
  }
  
  # PHP-FPM logs - rotated (plain text)
  file {
    path => "/var/log/php8.1-fpm.log.*"
    start_position => "beginning"
    type => "php_fpm"
    tags => ["php", "fpm", "service", "rotated"]
    exclude => "*.gz"
  }
  
  # PHP-FPM logs - compressed rotated
  file {
    path => "/var/log/php8.1-fpm.log.*.gz"
    start_position => "beginning"
    type => "php_fpm"
    tags => ["php", "fpm", "service", "rotated", "compressed"]
    codec => "gzip"
  }
  
  file {
    path => "/var/log/syslog"
    start_position => "beginning"
    type => "syslog"
    tags => ["system", "syslog"]
  }
  
  file {
    path => "/var/log/auth.log"
    start_position => "beginning"
    type => "auth"
    tags => ["system", "auth"]
  }
  
  # Custom log directories
  file {
    path => "/logs/custom1/*.log"
    start_position => "beginning"
    type => "custom1"
    tags => ["custom", "app1"]
  }
  
  file {
    path => "/logs/custom2/*.log"
    start_position => "beginning"
    type => "custom2"
    tags => ["custom", "app2"]
  }

  # Beats input
  beats {
    port => 5045
  }
}

filter {
  # Apache Access Log parsing
  if [type] == "apache_access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
    }
  }
  
  # Apache Error Log parsing
  if [type] == "apache_error" {
    grok {
      match => { 
        "message" => "\[%{HTTPDATE:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IPORHOST:clientip}\] )?%{GREEDYDATA:error_message}"
      }
    }
    date {
      match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
    }
  }
  
  # Laravel Log parsing (all types)
  if [type] =~ /^laravel/ {
    # Try standard Laravel format first
    grok {
      match => {
        "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{WORD:environment}\.%{LOGLEVEL:level}: %{GREEDYDATA:log_message}"
      }
    }
    
    # If that fails, try simpler format for some Laravel logs
    if "_grokparsefailure" in [tags] {
      mutate { remove_tag => [ "_grokparsefailure" ] }
      grok {
        match => {
          "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level}: %{GREEDYDATA:log_message}"
        }
      }
    }
    
    # If still failing, try basic timestamp extraction
    if "_grokparsefailure" in [tags] {
      mutate { remove_tag => [ "_grokparsefailure" ] }
      grok {
        match => {
          "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{GREEDYDATA:log_message}"
        }
      }
    }
    
    # Parse the date
    if [timestamp] {
      date {
        match => [ "timestamp", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      }
    }
    
    # Add log type specific fields
    if [type] == "laravel_error" {
      mutate { add_field => { "log_category" => "error" } }
    } else if [type] == "laravel_info" {
      mutate { add_field => { "log_category" => "info" } }
    } else if [type] == "laravel_mobile" {
      mutate { add_field => { "log_category" => "mobile" } }
    } else {
      mutate { add_field => { "log_category" => "general" } }
    }
  }
  
  # PM2 Log parsing
  if [type] == "pm2" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp}: %{GREEDYDATA:log_message}"
      }
    }
    if "_grokparsefailure" in [tags] {
      grok {
        match => {
          "message" => "%{GREEDYDATA:log_message}"
        }
      }
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
    }
  }
  
  # PHP-FPM Log parsing
  if [type] == "php_fpm" {
    grok {
      match => {
        "message" => "\[%{HTTPDATE:timestamp}\] %{LOGLEVEL:level}: %{GREEDYDATA:fpm_message}"
      }
    }
    # If that fails, try simpler format
    if "_grokparsefailure" in [tags] {
      mutate { remove_tag => [ "_grokparsefailure" ] }
      grok {
        match => {
          "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{GREEDYDATA:fpm_message}"
        }
      }
    }
    date {
      match => [ "timestamp", "dd-MMM-yyyy HH:mm:ss z", "yyyy-MM-dd HH:mm:ss" ]
    }
  }
  
  # Syslog parsing
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:logsource} %{PROG:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" }
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  
  # Auth log parsing
  if [type] == "auth" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:logsource} %{PROG:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" }
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  
  # Add hostname and clean up
  mutate {
    add_field => { "host_name" => "%{host}" }
    remove_field => [ "host" ]
  }
  
  # GeoIP for Apache access logs
  if [type] == "apache_access" and [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{type}-%{+YYYY.MM.dd}"
  }
  
  # Debug output (comment out in production)
  # stdout { codec => rubydebug }
} 